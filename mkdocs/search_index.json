{
    "docs": [
        {
            "location": "/",
            "text": "unrest\n\n\nA troubling rest api library for sqlalchemy models\n\n\nSimple sqlalchemy rest api generation.\n\n\nfrom unrest import UnRest\nrest = UnRest(app)  # Flask app or a tornado application (coming soon) or anything else (you will have to implement the framework class)\n\nfrom .model import Person\n\nrest(Person, only=['name', 'sex', 'age'])\n\n\n\n\nThis should provides you a \n/api/person\n and a \n/api/person/<login>\n route accessible in GET only.\n\n\nTo activate data modification, set the methods array like this:\n\n\nrest(Person, only=['name', 'sex', 'age'], methods=['GET', 'PUT', 'POST', 'DELETE'])\n\n\n\n\nYou will get both routes on the four methods. Please see \nthe wikipedia page\n for their signification.\n\n\nYou can also override the default methods like this:\n\n\nperson = rest(Person)\n\n@person.declare('GET')\ndef get(payload, login=None):\n    # Pre get hook\n    if login:\n        login = login.upper()\n    rv = person.get(payload, login=login)\n    # Post get hook\n    return {\n        'occurences': rv['occurences'],\n        'objects': [\n            {'login': person['login'].lower()} for person in rv['objects']\n        ]\n    }",
            "title": "Home"
        },
        {
            "location": "/#unrest",
            "text": "",
            "title": "unrest"
        },
        {
            "location": "/#a-troubling-rest-api-library-for-sqlalchemy-models",
            "text": "Simple sqlalchemy rest api generation.  from unrest import UnRest\nrest = UnRest(app)  # Flask app or a tornado application (coming soon) or anything else (you will have to implement the framework class)\n\nfrom .model import Person\n\nrest(Person, only=['name', 'sex', 'age'])  This should provides you a  /api/person  and a  /api/person/<login>  route accessible in GET only.  To activate data modification, set the methods array like this:  rest(Person, only=['name', 'sex', 'age'], methods=['GET', 'PUT', 'POST', 'DELETE'])  You will get both routes on the four methods. Please see  the wikipedia page  for their signification.  You can also override the default methods like this:  person = rest(Person)\n\n@person.declare('GET')\ndef get(payload, login=None):\n    # Pre get hook\n    if login:\n        login = login.upper()\n    rv = person.get(payload, login=login)\n    # Post get hook\n    return {\n        'occurences': rv['occurences'],\n        'objects': [\n            {'login': person['login'].lower()} for person in rv['objects']\n        ]\n    }",
            "title": "A troubling rest api library for sqlalchemy models"
        },
        {
            "location": "/unrest/",
            "text": "UnRest\n\n\nUnRest(app=None, session=None, path='/api', version='', framework=None)\n\n\n\n\nA troubling rest api library for sqlalchemy models.\nThis is the main entry point of unrest.\n\n\nCommon usage is as following:\n\n\nrest = UnRest(app, session)  # app is your application\n# When called, it instanciate a `Rest` object that will register the\n# REST endpoints. See the `Rest` class.\nrest(Model1)\nrest(Model2)\n\n\n\n\nArguments\n\n\n\n\napp\n: Your web application,\n        can be set afterwards using \nUnRest.init_app\n\n\nsession\n: Your sqlalchemy session,\n        can be set afterwards using \nUnRest.init_session\n\n        and \ninit_session\n method.\n\n\npath\n: Default '/api', sets the root url path for your endpoints\n\n\nversion\n: Adds a version to the root url path if specified\n        (i.e. /api/v2)\n\n\nframework\n: Your specific framework class, defaults to auto detect.\n\n\n\n\nUnrest aims to be framework agnostic.\nIt currently works with Flask out of the box, for another web framework\nyou will have to implement your own Framework class.\nSee \nFlaskUnRest\n in \nflask_framework.py\n\n\n\n\nRestError\n\n\nUnRest.RestError(status, message)\n\n\n\n\nException raised by rest methods. It's catched by the REST method\nwrapper and will return a \nstatus\n http error with the specified\n\nmessage\n.\n\n\n\n\nall\n\n\nReturn all supported methods. Useful for the rest\n\nmethod\n keyword argument.\n\n\n\n\ninit_app\n\n\nUnRest.init_app(app)\n\n\n\n\nSets the app on UnRest if it was missing during instantiation.\n\n\n\ninit_session\n\n\nUnRest.init_session(session)\n\n\n\n\nSets the sqlalchemy session on UnRest\nif it was missing during instantiation.\n\n\n\n\nraise_error\n\n\nUnRest.raise_error(status, message)\n\n\n\n\nRaise an error that will be handled by the rest wrapper, which\nwill return a json response with status as HTTP status code\nand message as content.",
            "title": "UnRest"
        },
        {
            "location": "/unrest/#unrest",
            "text": "UnRest(app=None, session=None, path='/api', version='', framework=None)  A troubling rest api library for sqlalchemy models.\nThis is the main entry point of unrest.  Common usage is as following:  rest = UnRest(app, session)  # app is your application\n# When called, it instanciate a `Rest` object that will register the\n# REST endpoints. See the `Rest` class.\nrest(Model1)\nrest(Model2)  Arguments   app : Your web application,\n        can be set afterwards using  UnRest.init_app  session : Your sqlalchemy session,\n        can be set afterwards using  UnRest.init_session \n        and  init_session  method.  path : Default '/api', sets the root url path for your endpoints  version : Adds a version to the root url path if specified\n        (i.e. /api/v2)  framework : Your specific framework class, defaults to auto detect.   Unrest aims to be framework agnostic.\nIt currently works with Flask out of the box, for another web framework\nyou will have to implement your own Framework class.\nSee  FlaskUnRest  in  flask_framework.py",
            "title": "UnRest"
        },
        {
            "location": "/unrest/#resterror",
            "text": "UnRest.RestError(status, message)  Exception raised by rest methods. It's catched by the REST method\nwrapper and will return a  status  http error with the specified message .",
            "title": "RestError"
        },
        {
            "location": "/unrest/#all",
            "text": "Return all supported methods. Useful for the rest method  keyword argument.",
            "title": "all"
        },
        {
            "location": "/unrest/#init_app",
            "text": "UnRest.init_app(app)  Sets the app on UnRest if it was missing during instantiation.",
            "title": "init_app"
        },
        {
            "location": "/unrest/#init_session",
            "text": "UnRest.init_session(session)  Sets the sqlalchemy session on UnRest\nif it was missing during instantiation.",
            "title": "init_session"
        },
        {
            "location": "/unrest/#raise_error",
            "text": "UnRest.raise_error(status, message)  Raise an error that will be handled by the rest wrapper, which\nwill return a json response with status as HTTP status code\nand message as content.",
            "title": "raise_error"
        },
        {
            "location": "/rest/",
            "text": "unrest.rest\n\n\n\n\nRest\n\n\nRest(unrest, Model, methods=['GET'], name=None, only=None, exclude=None, query=None, allow_batch=False, auth=None, read_auth=None, write_auth=None, SerializeClass=<class 'unrest.coercers.Serialize'>, DeserializeClass=<class 'unrest.coercers.Deserialize'>)\n\n\n\n\nThis is the entry point for generating a REST endpoint for a specific model\nIt takes the Unrest instance given by calling it.",
            "title": "Rest entry points"
        },
        {
            "location": "/rest/#unrestrest",
            "text": "",
            "title": "unrest.rest"
        },
        {
            "location": "/rest/#rest",
            "text": "Rest(unrest, Model, methods=['GET'], name=None, only=None, exclude=None, query=None, allow_batch=False, auth=None, read_auth=None, write_auth=None, SerializeClass=<class 'unrest.coercers.Serialize'>, DeserializeClass=<class 'unrest.coercers.Deserialize'>)  This is the entry point for generating a REST endpoint for a specific model\nIt takes the Unrest instance given by calling it.",
            "title": "Rest"
        },
        {
            "location": "/coercers/",
            "text": "unrest.coercers\n\n\n\n\nSerialize\n\n\nSerialize(model, columns)\n\n\n\n\n\n\nDeserialize\n\n\nDeserialize(payload, columns)",
            "title": "Serialization/Deserialization"
        },
        {
            "location": "/coercers/#unrestcoercers",
            "text": "",
            "title": "unrest.coercers"
        },
        {
            "location": "/coercers/#serialize",
            "text": "Serialize(model, columns)",
            "title": "Serialize"
        },
        {
            "location": "/coercers/#deserialize",
            "text": "Deserialize(payload, columns)",
            "title": "Deserialize"
        },
        {
            "location": "/flask_framework/",
            "text": "FlaskUnRest\n\n\nFlaskUnRest(app)\n\n\n\n\n\n\nregister_route\n\n\nFlaskUnRest.register_route(path, method, parameters, fun)\n\n\n\n\nRegister fun for \npath\n for \nmethod\n with and without \nparameters",
            "title": "Flask"
        },
        {
            "location": "/flask_framework/#flaskunrest",
            "text": "FlaskUnRest(app)",
            "title": "FlaskUnRest"
        },
        {
            "location": "/flask_framework/#register_route",
            "text": "FlaskUnRest.register_route(path, method, parameters, fun)  Register fun for  path  for  method  with and without  parameters",
            "title": "register_route"
        }
    ]
}