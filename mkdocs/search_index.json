{
    "docs": [
        {
            "location": "/",
            "text": "unrest\n\n\nA troubling rest api library for sqlalchemy models\n\n\nSimple sqlalchemy rest api generation.\n\n\nfrom unrest import UnRest\nrest = UnRest(app)  # Flask app or a tornado application (coming soon) or anything else (you will have to implement the framework class)\n\nfrom .model import Person\n\nrest(Person, only=['name', 'sex', 'age'])\n\n\n\n\nThis should provides you a \n/api/person\n and a \n/api/person/<login>\n route accessible in GET only.\n\n\nTo activate data modification, set the methods array like this:\n\n\nrest(Person, only=['name', 'sex', 'age'], methods=['GET', 'PUT', 'POST', 'DELETE'])\n\n\n\n\nYou will get both routes on the four methods. Please see \nthe wikipedia page\n for their signification.\n\n\nYou can also override the default methods like this:\n\n\nperson = rest(Person)\n\n@person.declare('GET')\ndef get(payload, login=None):\n    # Pre get hook\n    if login:\n        login = login.upper()\n    rv = person.get(payload, login=login)\n    # Post get hook\n    return {\n        'occurences': rv['occurences'],\n        'objects': [\n            {'login': person['login'].lower()} for person in rv['objects']\n        ]\n    }",
            "title": "Home"
        },
        {
            "location": "/#unrest",
            "text": "",
            "title": "unrest"
        },
        {
            "location": "/#a-troubling-rest-api-library-for-sqlalchemy-models",
            "text": "Simple sqlalchemy rest api generation.  from unrest import UnRest\nrest = UnRest(app)  # Flask app or a tornado application (coming soon) or anything else (you will have to implement the framework class)\n\nfrom .model import Person\n\nrest(Person, only=['name', 'sex', 'age'])  This should provides you a  /api/person  and a  /api/person/<login>  route accessible in GET only.  To activate data modification, set the methods array like this:  rest(Person, only=['name', 'sex', 'age'], methods=['GET', 'PUT', 'POST', 'DELETE'])  You will get both routes on the four methods. Please see  the wikipedia page  for their signification.  You can also override the default methods like this:  person = rest(Person)\n\n@person.declare('GET')\ndef get(payload, login=None):\n    # Pre get hook\n    if login:\n        login = login.upper()\n    rv = person.get(payload, login=login)\n    # Post get hook\n    return {\n        'occurences': rv['occurences'],\n        'objects': [\n            {'login': person['login'].lower()} for person in rv['objects']\n        ]\n    }",
            "title": "A troubling rest api library for sqlalchemy models"
        },
        {
            "location": "/unrest/",
            "text": "unrest\n\n\n\n\nUnRest\n\n\nUnRest(app=None, session=None, path='/api', version='', framework=None, SerializeClass=None, DeserializeClass=None)\n\n\n\n\nA troubling rest api library for sqlalchemy models.\nThis is the main entry point of unrest.\n\n\nCommon usage is as following:\n\n\nrest = UnRest(app, session)  # app is your application\n# When called, it instanciate a `Rest` object that will register the\n# REST endpoints. See the `Rest` class.\nrest(Model1)\nrest(Model2)\n\n\n\n\nArguments\n\n\n\n\napp\n: Your web application,\n        can be set afterwards using \nUnRest.init_app\n\n\nsession\n: Your sqlalchemy session,\n        can be set afterwards using \nUnRest.init_session\n\n        and \ninit_session\n method.\n\n\npath\n: Default '/api', sets the root url path for your endpoints\n\n\nversion\n: Adds a version to the root url path if specified\n        (i.e. /api/v2)\n\n\nframework\n: Your specific framework class, defaults to auto detect.\n\n\nSerializeClass\n: A global alternative for \nSerialize\n class.\n\n\nDeserializeClass\n: A global alternative for \nDeserialize\n class.\nUnrest aims to be framework agnostic.\nIt currently works with Flask out of the box, for another web framework\nyou will have to implement your own Framework class.\nSee \nFlaskUnRest\n in \nflask_framework.py\n\n\n\n\n\n\ncall\n\n\nUnRest.__call__()\n\n\n\n\nReturns a \nunrest.Rest\n instance. See rest entry points.\n\n\n\nRestError\n\n\nUnRest.RestError(status, message)\n\n\n\n\nException raised by rest methods. It's catched by the REST method\nwrapper and will return a \nstatus\n http error with the specified\n\nmessage\n.\n\n\n\n\ninit_app\n\n\nUnRest.init_app(app)\n\n\n\n\nSets the app on UnRest if it was missing during instantiation.\n\n\n\ninit_session\n\n\nUnRest.init_session(session)\n\n\n\n\nSets the sqlalchemy session on UnRest\nif it was missing during instantiation.\n\n\n\n\nall\n\n\nReturn all supported methods. Useful for the rest\n\nmethod\n keyword argument.\n\n\n\n\nraise_error\n\n\nUnRest.raise_error(status, message)\n\n\n\n\nRaise an error that will be handled by the rest wrapper, which\nwill return a json response with status as HTTP status code\nand message as content.\n\n\nArguments\n\n\n\n\nstatus\n: The http status code corresponding to the error\n        (404 for instance)\n\n\nmessage\n: The message that will be returned in the json response",
            "title": "UnRest"
        },
        {
            "location": "/unrest/#unrest",
            "text": "",
            "title": "unrest"
        },
        {
            "location": "/unrest/#unrest_1",
            "text": "UnRest(app=None, session=None, path='/api', version='', framework=None, SerializeClass=None, DeserializeClass=None)  A troubling rest api library for sqlalchemy models.\nThis is the main entry point of unrest.  Common usage is as following:  rest = UnRest(app, session)  # app is your application\n# When called, it instanciate a `Rest` object that will register the\n# REST endpoints. See the `Rest` class.\nrest(Model1)\nrest(Model2)  Arguments   app : Your web application,\n        can be set afterwards using  UnRest.init_app  session : Your sqlalchemy session,\n        can be set afterwards using  UnRest.init_session \n        and  init_session  method.  path : Default '/api', sets the root url path for your endpoints  version : Adds a version to the root url path if specified\n        (i.e. /api/v2)  framework : Your specific framework class, defaults to auto detect.  SerializeClass : A global alternative for  Serialize  class.  DeserializeClass : A global alternative for  Deserialize  class.\nUnrest aims to be framework agnostic.\nIt currently works with Flask out of the box, for another web framework\nyou will have to implement your own Framework class.\nSee  FlaskUnRest  in  flask_framework.py",
            "title": "UnRest"
        },
        {
            "location": "/unrest/#call",
            "text": "UnRest.__call__()  Returns a  unrest.Rest  instance. See rest entry points.",
            "title": "call"
        },
        {
            "location": "/unrest/#resterror",
            "text": "UnRest.RestError(status, message)  Exception raised by rest methods. It's catched by the REST method\nwrapper and will return a  status  http error with the specified message .",
            "title": "RestError"
        },
        {
            "location": "/unrest/#init_app",
            "text": "UnRest.init_app(app)  Sets the app on UnRest if it was missing during instantiation.",
            "title": "init_app"
        },
        {
            "location": "/unrest/#init_session",
            "text": "UnRest.init_session(session)  Sets the sqlalchemy session on UnRest\nif it was missing during instantiation.",
            "title": "init_session"
        },
        {
            "location": "/unrest/#all",
            "text": "Return all supported methods. Useful for the rest method  keyword argument.",
            "title": "all"
        },
        {
            "location": "/unrest/#raise_error",
            "text": "UnRest.raise_error(status, message)  Raise an error that will be handled by the rest wrapper, which\nwill return a json response with status as HTTP status code\nand message as content.  Arguments   status : The http status code corresponding to the error\n        (404 for instance)  message : The message that will be returned in the json response",
            "title": "raise_error"
        },
        {
            "location": "/rest/",
            "text": "unrest.rest\n\n\n\n\nRest\n\n\nRest(unrest, Model, methods=['GET'], name=None, only=None, exclude=None, query=None, allow_batch=False, auth=None, read_auth=None, write_auth=None, SerializeClass=<class 'unrest.coercers.Serialize'>, DeserializeClass=<class 'unrest.coercers.Deserialize'>)\n\n\n\n\nThis is the entry point for generating a REST endpoint for a specific model\nThe final uri if the path is '/api' and version 'v2' would be:\n\n/api/v2/model\n and \n/api/v2/model/pk1/pk2\n and if model is not in the\npublic schema \n/api/v2/schema/model\n and \n/api/v2/schema/model/pk1/pk2\n.\n\n\nUsage:\n\n\n    rest = UnRest(app)\n    rest(Person, only=['name', 'sex', 'age'], methods=rest.all,\n         query=lambda q: q.filter(Person.age > 16))\n\n\n\n\nArguments\n\n\n\n\nunrest\n: The unrest instance given automatically on UnRest call.\n\n\nModel\n: The sqlalchemy orm model class.\n\n\nmethods\n: The allowed method list on this endpoint. Possible values are\n        GET, PUT, POST, DELETE and rest.all\n\n\nname\n: If specified replaces the model name in url.\n\n\nonly\n: If specified restricts the json fields to this list.\n\n\nexclude\n: If specified removes the json fields in this list.\n\n\nquery\n: A function that takes the Model query and returns your specific\n        query. Can be useful to filter data for all the methods.\n\n\nallow_batch\n: Allow batch operations (PUT and DELETE)\n        without primary key.\n\n\nauth\n: A decorator that will always be called.\n\n\nread_auth\n: A decorator that will be called on GET.\n\n\nwrite_auth\n: A decorator that will be called on PUT, POST and DELETE.\n\n\nSerializeClass\n: An alternative \nSerialize\n class.\n\n\nDeserializeClass\n: An alternative \nDeserialize\n class.\n\n\n\n\n\n\nget\n\n\nRest.get(payload)\n\n\n\n\nThe GET method\n\n\nNo arguments: Returns all query elements. (/api/model/)\nPrimary keys: Returns the element in query with the primary keys or\n    404. (/api/model/pk)\n\n\nArguments\n\n\n\n\npayload\n: The json request content ignored for GET.\n\n\npks\n: The primary keys in url if any.\n\n\n\n\n\n\nput\n\n\nRest.put(payload)\n\n\n\n\nThe PUT method\n\n\nNo arguments: If allow_batch set to true replace all the query elements\n    with the ones in the request payload.\nPrimary keys: Create or replace the element associated\n    with the primary keys from the one in the request payload.\n\n\nArguments\n\n\n\n\npayload\n: The json request content containing new elements.\n\n\npks\n: The primary keys in url if any.\n\n\n\n\n\n\npost\n\n\nRest.post(payload)\n\n\n\n\nThe POST method\n\n\nNo arguments: Add element from request payload.\nPrimary keys: Correspond to new collection creation. Unused.\n\n\nArguments\n\n\n\n\npayload\n: The json request content containing the new element.\n\n\npks\n: The primary keys in url if any.\n\n\n\n\n\n\ndelete\n\n\nRest.delete(payload)\n\n\n\n\nThe DELETE method\n\n\nNo arguments: If allow_batch set to true delete all query elements.\nPrimary keys: Delete the element associated with the primary keys.\n\n\nArguments\n\n\n\n\npayload\n: The json request content ignored in DELETE.\n\n\npks\n: The primary keys of the element to delete.\n\n\n\n\n\n\ndeclare\n\n\nRest.declare(method)\n\n\n\n\nA decorator to register an alternative method.\nThe original is still callable with rest.{method}\n\n\nfruit = rest(Fruit)\n\n@fruit.declare('GET')\ndef get(payload, fruit_id=None):\n    rv = fruit.get(payload, fruit_id=fruit_id)\n    return {\n        'occurences': rv['occurences'],\n        'objects': [\n            {'id': obj['fruit_id']} for obj in rv['objects']\n        ]\n    }\n\n\n\n\nArguments\n\n\n\n\nmethod\n: The method to override ('GET' for exemple)",
            "title": "Rest entry points"
        },
        {
            "location": "/rest/#unrestrest",
            "text": "",
            "title": "unrest.rest"
        },
        {
            "location": "/rest/#rest",
            "text": "Rest(unrest, Model, methods=['GET'], name=None, only=None, exclude=None, query=None, allow_batch=False, auth=None, read_auth=None, write_auth=None, SerializeClass=<class 'unrest.coercers.Serialize'>, DeserializeClass=<class 'unrest.coercers.Deserialize'>)  This is the entry point for generating a REST endpoint for a specific model\nThe final uri if the path is '/api' and version 'v2' would be: /api/v2/model  and  /api/v2/model/pk1/pk2  and if model is not in the\npublic schema  /api/v2/schema/model  and  /api/v2/schema/model/pk1/pk2 .  Usage:      rest = UnRest(app)\n    rest(Person, only=['name', 'sex', 'age'], methods=rest.all,\n         query=lambda q: q.filter(Person.age > 16))  Arguments   unrest : The unrest instance given automatically on UnRest call.  Model : The sqlalchemy orm model class.  methods : The allowed method list on this endpoint. Possible values are\n        GET, PUT, POST, DELETE and rest.all  name : If specified replaces the model name in url.  only : If specified restricts the json fields to this list.  exclude : If specified removes the json fields in this list.  query : A function that takes the Model query and returns your specific\n        query. Can be useful to filter data for all the methods.  allow_batch : Allow batch operations (PUT and DELETE)\n        without primary key.  auth : A decorator that will always be called.  read_auth : A decorator that will be called on GET.  write_auth : A decorator that will be called on PUT, POST and DELETE.  SerializeClass : An alternative  Serialize  class.  DeserializeClass : An alternative  Deserialize  class.",
            "title": "Rest"
        },
        {
            "location": "/rest/#get",
            "text": "Rest.get(payload)  The GET method  No arguments: Returns all query elements. (/api/model/)\nPrimary keys: Returns the element in query with the primary keys or\n    404. (/api/model/pk)  Arguments   payload : The json request content ignored for GET.  pks : The primary keys in url if any.",
            "title": "get"
        },
        {
            "location": "/rest/#put",
            "text": "Rest.put(payload)  The PUT method  No arguments: If allow_batch set to true replace all the query elements\n    with the ones in the request payload.\nPrimary keys: Create or replace the element associated\n    with the primary keys from the one in the request payload.  Arguments   payload : The json request content containing new elements.  pks : The primary keys in url if any.",
            "title": "put"
        },
        {
            "location": "/rest/#post",
            "text": "Rest.post(payload)  The POST method  No arguments: Add element from request payload.\nPrimary keys: Correspond to new collection creation. Unused.  Arguments   payload : The json request content containing the new element.  pks : The primary keys in url if any.",
            "title": "post"
        },
        {
            "location": "/rest/#delete",
            "text": "Rest.delete(payload)  The DELETE method  No arguments: If allow_batch set to true delete all query elements.\nPrimary keys: Delete the element associated with the primary keys.  Arguments   payload : The json request content ignored in DELETE.  pks : The primary keys of the element to delete.",
            "title": "delete"
        },
        {
            "location": "/rest/#declare",
            "text": "Rest.declare(method)  A decorator to register an alternative method.\nThe original is still callable with rest.{method}  fruit = rest(Fruit)\n\n@fruit.declare('GET')\ndef get(payload, fruit_id=None):\n    rv = fruit.get(payload, fruit_id=fruit_id)\n    return {\n        'occurences': rv['occurences'],\n        'objects': [\n            {'id': obj['fruit_id']} for obj in rv['objects']\n        ]\n    }  Arguments   method : The method to override ('GET' for exemple)",
            "title": "declare"
        },
        {
            "location": "/coercers/",
            "text": "unrest.coercers\n\n\n\n\nSerialize\n\n\nSerialize(model, columns)\n\n\n\n\nBase serializer class\n\n\nCasts python sqlalchemy data into a JSON compliant type according to\nthe sqlalchemy column type.\n\n\nNot all types are implemented as of now and it's fairly easy to add:\nJust add a \nserialize_type\n method for \ntype\n and it shall work.\n\n\nThe serialize class can be configured with the rest function and\non the UnRest declaration.\n\n\nFor example:\n\n\nfrom unrest.coercers import Serialize\n\nclass BetterSerialize(Serialize):\n    def serialize_matrix(self, type, data):\n        return data.matrix_to_string()\n\nrest = UnRest(app, session, SerializeClass=BetterSerialize)\n...\n\n\n\n\nArguments\n\n\n\n\nmodel\n: The sqlachemy item to serialize.\n\n\ncolumns\n: The list of columns to serialize.\n\n\n\n\n\n\nDeserialize\n\n\nDeserialize(payload, columns)\n\n\n\n\nBase deserializer class\n\n\nCasts JSON data back to compatible python sqlalchemy type.\n\n\nNot all types are implemented as of now and it's fairly easy to add:\nJust add a \ndeserialize_type\n method for \ntype\n and it shall work.\n\n\nThe deserialize class can be configured with the rest function and\non the UnRest declaration.\n\n\nFor example:\n\n\nfrom unrest.coercers import Deserialize\n\nclass BetterDeserialize(Deserialize):\n    def deserialize_matrix(self, type, data):\n        return Matrix.from_string(data)\n\nrest = UnRest(app, session, DeserializeClass=BetterDeserialize)\n...\n\n\n\n\nArguments\n\n\n\n\npayload\n: The JSON payload to deserialize\n\n\ncolumns\n: The list of columns to deserialize\n\n\n\n\n\n\ndict\n\n\nSerialize.dict()\n\n\n\n\nSerialize the given model to a JSON compatible dict\n\n\n\nmerge\n\n\nDeserialize.merge(item, payload=None)\n\n\n\n\nDeserialize the given payload into the existing sqlachemy \nitem\n\n\n\n\ncreate\n\n\nDeserialize.create(factory)\n\n\n\n\nDeserialize objects in the given payload into a list of new items\ncreated with the \nfactory\n function.",
            "title": "Serialization/Deserialization"
        },
        {
            "location": "/coercers/#unrestcoercers",
            "text": "",
            "title": "unrest.coercers"
        },
        {
            "location": "/coercers/#serialize",
            "text": "Serialize(model, columns)  Base serializer class  Casts python sqlalchemy data into a JSON compliant type according to\nthe sqlalchemy column type.  Not all types are implemented as of now and it's fairly easy to add:\nJust add a  serialize_type  method for  type  and it shall work.  The serialize class can be configured with the rest function and\non the UnRest declaration.  For example:  from unrest.coercers import Serialize\n\nclass BetterSerialize(Serialize):\n    def serialize_matrix(self, type, data):\n        return data.matrix_to_string()\n\nrest = UnRest(app, session, SerializeClass=BetterSerialize)\n...  Arguments   model : The sqlachemy item to serialize.  columns : The list of columns to serialize.",
            "title": "Serialize"
        },
        {
            "location": "/coercers/#deserialize",
            "text": "Deserialize(payload, columns)  Base deserializer class  Casts JSON data back to compatible python sqlalchemy type.  Not all types are implemented as of now and it's fairly easy to add:\nJust add a  deserialize_type  method for  type  and it shall work.  The deserialize class can be configured with the rest function and\non the UnRest declaration.  For example:  from unrest.coercers import Deserialize\n\nclass BetterDeserialize(Deserialize):\n    def deserialize_matrix(self, type, data):\n        return Matrix.from_string(data)\n\nrest = UnRest(app, session, DeserializeClass=BetterDeserialize)\n...  Arguments   payload : The JSON payload to deserialize  columns : The list of columns to deserialize",
            "title": "Deserialize"
        },
        {
            "location": "/coercers/#dict",
            "text": "Serialize.dict()  Serialize the given model to a JSON compatible dict",
            "title": "dict"
        },
        {
            "location": "/coercers/#merge",
            "text": "Deserialize.merge(item, payload=None)  Deserialize the given payload into the existing sqlachemy  item",
            "title": "merge"
        },
        {
            "location": "/coercers/#create",
            "text": "Deserialize.create(factory)  Deserialize objects in the given payload into a list of new items\ncreated with the  factory  function.",
            "title": "create"
        },
        {
            "location": "/flask_framework/",
            "text": "unrest.flask_framework\n\n\n\n\nFlaskUnRest\n\n\nFlaskUnRest(app)\n\n\n\n\nUnrest flask framework implementation.\nThis is the framework abstraction you can implement for your own framework\n\n\n\n\nregister_route\n\n\nFlaskUnRest.register_route(path, method, parameters, fun)\n\n\n\n\nRegister the given function for \npath\n and \nmethod\n with and without\n\nparameters\n.\n\n\nArguments\n\n\n\n\npath\n: The url of the endoint without arguments. ('/api/person')\n\n\nmethod\n: The HTTP method to register the route on.\n\n\nparameters\n: The primary keys of the model that can be given\n        after the path. \nPrimaryKey('id'), PrimaryKey('type')) -> '/api/person/<id>/<type>'\n\n\nfun\n: The route function\n\n\n\n\n\n\nrequest_json\n\n\nFlaskUnRest.request_json()\n\n\n\n\nMust return the string of the current JSON request content or None\n\n\n\n\nsend_json\n\n\nFlaskUnRest.send_json(json)\n\n\n\n\nSend a 200 JSON response with \njson\n as content\n\n\nArguments\n\n\n\n\njson\n: The JSON string to send.\n\n\n\n\n\n\nsend_error\n\n\nFlaskUnRest.send_error(message, status_code)\n\n\n\n\nSend an error as a JSON response with the given status code.\n\n\nArguments\n\n\n\n\nmessage\n: The JSON string containing the error message.\n\n\nstatus_code\n: The HTTP status code (i.e. 402)",
            "title": "Flask"
        },
        {
            "location": "/flask_framework/#unrestflask_framework",
            "text": "",
            "title": "unrest.flask_framework"
        },
        {
            "location": "/flask_framework/#flaskunrest",
            "text": "FlaskUnRest(app)  Unrest flask framework implementation.\nThis is the framework abstraction you can implement for your own framework",
            "title": "FlaskUnRest"
        },
        {
            "location": "/flask_framework/#register_route",
            "text": "FlaskUnRest.register_route(path, method, parameters, fun)  Register the given function for  path  and  method  with and without parameters .  Arguments   path : The url of the endoint without arguments. ('/api/person')  method : The HTTP method to register the route on.  parameters : The primary keys of the model that can be given\n        after the path.  PrimaryKey('id'), PrimaryKey('type')) -> '/api/person/<id>/<type>'  fun : The route function",
            "title": "register_route"
        },
        {
            "location": "/flask_framework/#request_json",
            "text": "FlaskUnRest.request_json()  Must return the string of the current JSON request content or None",
            "title": "request_json"
        },
        {
            "location": "/flask_framework/#send_json",
            "text": "FlaskUnRest.send_json(json)  Send a 200 JSON response with  json  as content  Arguments   json : The JSON string to send.",
            "title": "send_json"
        },
        {
            "location": "/flask_framework/#send_error",
            "text": "FlaskUnRest.send_error(message, status_code)  Send an error as a JSON response with the given status code.  Arguments   message : The JSON string containing the error message.  status_code : The HTTP status code (i.e. 402)",
            "title": "send_error"
        }
    ]
}