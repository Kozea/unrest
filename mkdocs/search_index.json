{
    "docs": [
        {
            "location": "/",
            "text": "unrest - \nSimple sqlalchemy rest api generation.\n\n\nfrom unrest import UnRest\n# First, initialize UnRest with your web application\nrest = UnRest(app)\n\n# Then declare your endpoint\nrest(Person)\n\n\n\n\nThis should provides you a \n/api/person\n and a \n/api/person/<login>\n route accessible in GET only.\n\n\nTo activate data modification, set the methods array like this:\n\n\nrest(Person, only=['name', 'sex', 'age'], methods=['GET', 'PUT', 'POST', 'DELETE', 'PATCH']) # or simply methods=rest.all\n\n\n\n\nYou will get both routes on the four methods. Please see \nthe wikipedia page\n for their signification.\n\n\nYou can also override the default methods like this:\n\n\nperson = rest(Person)\n\n@person.declare('GET')\ndef get(payload, login=None):\n    # Pre get hook\n    if login:\n        login = login.upper()\n    rv = person.get(payload, login=login)\n    # Post get hook\n    return {\n        'occurences': rv['occurences'],\n        'objects': [\n            {'login': person['login'].lower()} for person in rv['objects']\n        ]\n    }\n\n\n\n\nDocumentation\n\n\nFull documentation can be found at \nkozea.github.io/unrest\n\n\nExample\n\n\nConsider this simple web application:\n\n\nfrom datetime import timedelta\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql.schema import Column, ForeignKey\nfrom sqlalchemy.types import Integer, Interval, Numeric, String\n\nfrom unrest import UnRest\n\n# Flask application\napp = Flask(__name__)\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/unrest.db'\n\n# Model definition\ndb = SQLAlchemy(app)\n\nclass Tree(db.Model):\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\n    @property\n    def fruit_colors(self):\n        return ', '.join([fruit.color for fruit in self.fruits])\n\nclass Fruit(db.Model):\n    fruit_id = Column(Integer, primary_key=True)\n    color = Column(String(50))\n    size = Column(Numeric)\n    age = Column(Interval)\n    tree_id = Column(Integer, ForeignKey('tree.id'))\n    tree = relationship(Tree, backref='fruits')\n\n# Drop everything just in case\ndb.drop_all()\n\n# Create model\ndb.create_all()\n\n# Data insertion\npine = Tree(name='pine')\nmaple = Tree(name='maple')\noak = Tree(name='oak')\ndb.session.add(pine)\ndb.session.add(maple)\ndb.session.add(oak)\n\ndb.session.add(Fruit(color='grey', size=12, age=timedelta(days=12, hours=1, minutes=15), tree=pine))\ndb.session.add(Fruit(color='darkgrey', size=23, age=timedelta(days=49, seconds=230, milliseconds=213), tree=pine))\ndb.session.add(Fruit(color='brown', size=2.12, age=timedelta(0), tree=pine))\ndb.session.add(Fruit(color='red', size=.5, age=timedelta(minutes=40), tree=maple))\ndb.session.add(Fruit(color='orangered', size=100, age=timedelta(hours=2, microseconds=12), tree=maple))\n\ndb.session.commit()\ndb.session.remove()\n\n# Declare rest endpoints\nrest = UnRest(app, db.session)\n\n# Authorize every methods\nrest(Tree, methods=rest.all, allow_batch=True)\n# Don't authorize batch for fruits\nrest(Fruit, methods=rest.all)\n\n# Run the app\napp.run(debug=True)\n\n\n\n\nYou will now have:\n\n\nGET\n\n\nWith primary keys arguments\n\n\n$ curl -s http://localhost:5000/api/tree/1\n\n200 OK\n{\n    \"occurences\": 1,\n    \"objects\": [\n        {\n            \"id\": 1,\n            \"name\": \"pine\"\n        }\n    ]\n}\n\n\n\n\n$ curl -s http://localhost:5000/api/fruit/1\n\n200 OK\n{\n    \"occurences\": 1,\n    \"objects\": [\n        {\n            \"fruit_id\": 1,\n            \"color\": \"grey\",\n            \"size\": 12.0,\n            \"age\": 1041300.0,\n            \"tree_id\": 1\n        }\n    ]\n}\n\n\n\n\nWithout argument\n\n\n$ curl -s http://localhost:5000/api/tree\n\n200 OK\n{\n    \"occurences\": 3,\n    \"objects\": [\n        {\n            \"id\": 1,\n            \"name\": \"pine\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"maple\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"oak\"\n        }\n    ]\n}\n\n\n\n\n$ curl -s http://localhost:5000/api/fruit\n\n200 OK\n{\n    \"occurences\": 5,\n    \"objects\": [\n        {\n            \"fruit_id\": 1,\n            \"color\": \"grey\",\n            \"size\": 12.0,\n            \"age\": 1041300.0,\n            \"tree_id\": 1\n        },\n        {\n            \"fruit_id\": 2,\n            \"color\": \"darkgrey\",\n            \"size\": 23.0,\n            \"age\": 4233830.213,\n            \"tree_id\": 1\n        },\n        {\n            \"fruit_id\": 3,\n            \"color\": \"brown\",\n            \"size\": 2.12,\n            \"age\": 0.0,\n            \"tree_id\": 1\n        },\n        {\n            \"fruit_id\": 4,\n            \"color\": \"red\",\n            \"size\": 0.5,\n            \"age\": 2400.0,\n            \"tree_id\": 2\n        },\n        {\n            \"fruit_id\": 5,\n            \"color\": \"orangered\",\n            \"size\": 100.0,\n            \"age\": 7200.000012,\n            \"tree_id\": 2\n        }\n    ]\n}\n\n\n\n\nPUT\n\n\nWith primary keys arguments\n\n\n$ curl -s http://localhost:5000/api/tree/1 -X PUT -H \"Content-Type: application/json\" -d '{\n  \"name\": \"cedar\"\n}'\n\n200 OK\n{\n    \"occurences\": 1,\n    \"objects\": [\n        {\n            \"id\": 1,\n            \"name\": \"cedar\"\n        }\n    ]\n}\n\n\n\n\nGet it again to be sure:\n\n\n$ curl -s http://localhost:5000/api/tree/1\n\n200 OK\n{\n    \"occurences\": 1,\n    \"objects\": [\n        {\n            \"id\": 1,\n            \"name\": \"cedar\"\n        }\n    ]\n}\n\n\n\n\nWithout argument\n\n\n$ curl -s http://localhost:5000/api/tree -X PUT -H \"Content-Type: application/json\" -d '{\n  \"objects\": [{\"id\": 2, \"name\": \"cedar\"}, {\"id\": 22, \"name\": \"mango\"}]\n}'\n\n200 OK\n{\n    \"occurences\": 2,\n    \"objects\": [\n        {\n            \"id\": 2,\n            \"name\": \"cedar\"\n        },\n        {\n            \"id\": 22,\n            \"name\": \"mango\"\n        }\n    ]\n}\n\n\n\n\nGet it again to be sure:\n\n\n$ curl -s http://localhost:5000/api/tree\n\n200 OK\n{\n    \"occurences\": 2,\n    \"objects\": [\n        {\n            \"id\": 2,\n            \"name\": \"cedar\"\n        },\n        {\n            \"id\": 22,\n            \"name\": \"mango\"\n        }\n    ]\n}\n\n\n\n\nCheck that when allow_batch is not set we can't put all:\n\n\n$ curl -s http://localhost:5000/api/fruit -X PUT -H \"Content-Type: application/json\" -d '{\n  \"objects\": [\n    {\"fruit_id\": 2, \"color\": \"red\"},\n    {\"fruit_id\": 22, \"color\": \"blue\"}\n  ]\n}'\n\n406 Not Acceptable\n{\n  \"message\": \"You must set allow_batch to True if you want to use batch methods.\"\n}\n\n\n\n\nPOST\n\n\nWith primary keys arguments\n\n\n$ curl -s http://localhost:5000/api/tree/1 -X POST -H \"Content-Type: application/json\"\n\n501 Not Implemented\n{\n  \"message\": \"POST on id corresponds to collection creation. It's not implemented by default. If you want to update an item use the PUT method instead\"\n}\n\n\n\n\nWithout argument\n\n\n$ curl -s http://localhost:5000/api/fruit -X POST -H \"Content-Type: application/json\" -d '{\n  \"color\": \"forestgreen\", \"size\": 3.14, \"age\": 1.5926, \"tree_id\": 3\n}'\n\n200 OK\n{\n    \"occurences\": 1,\n    \"objects\": [\n        {\n            \"fruit_id\": 6,\n            \"color\": \"forestgreen\",\n            \"size\": 3.14,\n            \"age\": 1.5926,\n            \"tree_id\": 3\n        }\n    ]\n}\n\n\n\n\nNow we should have a total of 6 fruits:\n\n\n$ curl -s http://localhost:5000/api/fruit\n\n200 OK\n{\n    \"occurences\": 6,\n    \"objects\": [\n        {\n            \"fruit_id\": 1,\n            \"color\": \"grey\",\n            \"size\": 12.0,\n            \"age\": 1041300.0,\n            \"tree_id\": 1\n        },\n        {\n            \"fruit_id\": 2,\n            \"color\": \"darkgrey\",\n            \"size\": 23.0,\n            \"age\": 4233830.213,\n            \"tree_id\": 1\n        },\n        {\n            \"fruit_id\": 3,\n            \"color\": \"brown\",\n            \"size\": 2.12,\n            \"age\": 0.0,\n            \"tree_id\": 1\n        },\n        {\n            \"fruit_id\": 4,\n            \"color\": \"red\",\n            \"size\": 0.5,\n            \"age\": 2400.0,\n            \"tree_id\": 2\n        },\n        {\n            \"fruit_id\": 5,\n            \"color\": \"orangered\",\n            \"size\": 100.0,\n            \"age\": 7200.000012,\n            \"tree_id\": 2\n        },\n        {\n            \"fruit_id\": 6,\n            \"color\": \"forestgreen\",\n            \"size\": 3.14,\n            \"age\": 1.5926,\n            \"tree_id\": 3\n        }\n    ]\n}\n\n\n\n\nDELETE\n\n\nWith primary keys arguments\n\n\n$ curl -s http://localhost:5000/api/fruit/3 -X DELETE\n\n200 OK\n{\n    \"occurences\": 1,\n    \"objects\": [\n        {\n            \"fruit_id\": 3,\n            \"color\": \"brown\",\n            \"size\": 2.12,\n            \"age\": 0.0,\n            \"tree_id\": 1\n        }\n    ]\n}\n\n\n\n\nNow we should have only 5 fruits remaining:\n\n\n$ curl -s http://localhost:5000/api/fruit\n\n200 OK\n{\n    \"occurences\": 5,\n    \"objects\": [\n        {\n            \"fruit_id\": 1,\n            \"color\": \"grey\",\n            \"size\": 12.0,\n            \"age\": 1041300.0,\n            \"tree_id\": 1\n        },\n        {\n            \"fruit_id\": 2,\n            \"color\": \"darkgrey\",\n            \"size\": 23.0,\n            \"age\": 4233830.213,\n            \"tree_id\": 1\n        },\n        {\n            \"fruit_id\": 4,\n            \"color\": \"red\",\n            \"size\": 0.5,\n            \"age\": 2400.0,\n            \"tree_id\": 2\n        },\n        {\n            \"fruit_id\": 5,\n            \"color\": \"orangered\",\n            \"size\": 100.0,\n            \"age\": 7200.000012,\n            \"tree_id\": 2\n        },\n        {\n            \"fruit_id\": 6,\n            \"color\": \"forestgreen\",\n            \"size\": 3.14,\n            \"age\": 1.5926,\n            \"tree_id\": 3\n        }\n    ]\n}\n\n\n\n\nWithout argument\n\n\nBatch delete is not allowed on fruit:\n\n\n$ curl -s http://localhost:5000/api/fruit -X DELETE\n\n501 Not Implemented\n{\n  \"message\": \"You must set allow_batch to True if you want to use batch methods.\"\n}\n\n\n\n\nBut is on tree:\n\n\n$ curl -s http://localhost:5000/api/tree -X DELETE\n\n200 OK\n{\n    \"occurences\": 3,\n    \"objects\": [\n        {\n            \"id\": 1,\n            \"name\": \"pine\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"maple\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"oak\"\n        }\n    ]\n}\n\n\n\n\n$ curl -s http://localhost:5000/api/tree\n\n200 OK\n{\n    \"occurences\": 0,\n    \"objects\": []\n}\n\n\n\n\nPATCH\n\n\nWith primary keys arguments\n\n\n$ curl -s http://localhost:5000/api/fruit/1 -X PATCH -H \"Content-Type: application/json\" -d '{\n  \"color\": \"blue\"\n}'\n\n200 OK\n{\n    \"occurences\": 1,\n    \"objects\": [\n        {\n          \"fruit_id\": 1,\n          \"color\": \"blue\",\n          \"size\": 12.0,\n          \"age\": 1041300.0,\n          \"tree_id\": 1\n        }\n    ]\n}\n\n\n\n\nWithout argument\n\n\n$ curl -s http://localhost:5000/api/tree -X PATCH -H \"Content-Type: application/json\" -d '{\n  \"objects\": [{\"id\": 2, \"name\": \"cedar\"}, {\"id\": 3, \"name\": \"mango\"}]\n}'\n\n200 OK\n{\n    \"occurences\": 2,\n    \"objects\": [\n        {\n            \"id\": 2,\n            \"name\": \"cedar\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"mango\"\n        }\n    ]\n}\n\n\n\n\nCheck that when allow_batch is not set we can't put all:\n\n\n$ curl -s http://localhost:5000/api/fruit -X PATCH -H \"Content-Type: application/json\" -d '{\n  \"objects\": [\n    {\"fruit_id\": 1, \"color\": \"blue\"},\n    {\"fruit_id\": 3, \"age\": 1038540.0},\n    {\"fruit_id\": 4, \"color\": \"rainbow\", \"size\": 8},\n    {\"fruit_id\": 5, \"size\": 10, \"tree_id\": 1}\n  ]\n}'\n\n406 Not Acceptable\n{\n  \"message\": \"You must set allow_batch to True if you want to use batch methods.\"\n}\n\n\n\n\notherwise all the specified attributes would have been patched.",
            "title": "Home"
        },
        {
            "location": "/#unrest-simple-sqlalchemy-rest-api-generation",
            "text": "from unrest import UnRest\n# First, initialize UnRest with your web application\nrest = UnRest(app)\n\n# Then declare your endpoint\nrest(Person)  This should provides you a  /api/person  and a  /api/person/<login>  route accessible in GET only.  To activate data modification, set the methods array like this:  rest(Person, only=['name', 'sex', 'age'], methods=['GET', 'PUT', 'POST', 'DELETE', 'PATCH']) # or simply methods=rest.all  You will get both routes on the four methods. Please see  the wikipedia page  for their signification.  You can also override the default methods like this:  person = rest(Person)\n\n@person.declare('GET')\ndef get(payload, login=None):\n    # Pre get hook\n    if login:\n        login = login.upper()\n    rv = person.get(payload, login=login)\n    # Post get hook\n    return {\n        'occurences': rv['occurences'],\n        'objects': [\n            {'login': person['login'].lower()} for person in rv['objects']\n        ]\n    }",
            "title": "unrest - Simple sqlalchemy rest api generation."
        },
        {
            "location": "/#documentation",
            "text": "Full documentation can be found at  kozea.github.io/unrest",
            "title": "Documentation"
        },
        {
            "location": "/#example",
            "text": "Consider this simple web application:  from datetime import timedelta\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql.schema import Column, ForeignKey\nfrom sqlalchemy.types import Integer, Interval, Numeric, String\n\nfrom unrest import UnRest\n\n# Flask application\napp = Flask(__name__)\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/unrest.db'\n\n# Model definition\ndb = SQLAlchemy(app)\n\nclass Tree(db.Model):\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\n    @property\n    def fruit_colors(self):\n        return ', '.join([fruit.color for fruit in self.fruits])\n\nclass Fruit(db.Model):\n    fruit_id = Column(Integer, primary_key=True)\n    color = Column(String(50))\n    size = Column(Numeric)\n    age = Column(Interval)\n    tree_id = Column(Integer, ForeignKey('tree.id'))\n    tree = relationship(Tree, backref='fruits')\n\n# Drop everything just in case\ndb.drop_all()\n\n# Create model\ndb.create_all()\n\n# Data insertion\npine = Tree(name='pine')\nmaple = Tree(name='maple')\noak = Tree(name='oak')\ndb.session.add(pine)\ndb.session.add(maple)\ndb.session.add(oak)\n\ndb.session.add(Fruit(color='grey', size=12, age=timedelta(days=12, hours=1, minutes=15), tree=pine))\ndb.session.add(Fruit(color='darkgrey', size=23, age=timedelta(days=49, seconds=230, milliseconds=213), tree=pine))\ndb.session.add(Fruit(color='brown', size=2.12, age=timedelta(0), tree=pine))\ndb.session.add(Fruit(color='red', size=.5, age=timedelta(minutes=40), tree=maple))\ndb.session.add(Fruit(color='orangered', size=100, age=timedelta(hours=2, microseconds=12), tree=maple))\n\ndb.session.commit()\ndb.session.remove()\n\n# Declare rest endpoints\nrest = UnRest(app, db.session)\n\n# Authorize every methods\nrest(Tree, methods=rest.all, allow_batch=True)\n# Don't authorize batch for fruits\nrest(Fruit, methods=rest.all)\n\n# Run the app\napp.run(debug=True)  You will now have:",
            "title": "Example"
        },
        {
            "location": "/#get",
            "text": "",
            "title": "GET"
        },
        {
            "location": "/#with-primary-keys-arguments",
            "text": "$ curl -s http://localhost:5000/api/tree/1\n\n200 OK\n{\n    \"occurences\": 1,\n    \"objects\": [\n        {\n            \"id\": 1,\n            \"name\": \"pine\"\n        }\n    ]\n}  $ curl -s http://localhost:5000/api/fruit/1\n\n200 OK\n{\n    \"occurences\": 1,\n    \"objects\": [\n        {\n            \"fruit_id\": 1,\n            \"color\": \"grey\",\n            \"size\": 12.0,\n            \"age\": 1041300.0,\n            \"tree_id\": 1\n        }\n    ]\n}",
            "title": "With primary keys arguments"
        },
        {
            "location": "/#without-argument",
            "text": "$ curl -s http://localhost:5000/api/tree\n\n200 OK\n{\n    \"occurences\": 3,\n    \"objects\": [\n        {\n            \"id\": 1,\n            \"name\": \"pine\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"maple\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"oak\"\n        }\n    ]\n}  $ curl -s http://localhost:5000/api/fruit\n\n200 OK\n{\n    \"occurences\": 5,\n    \"objects\": [\n        {\n            \"fruit_id\": 1,\n            \"color\": \"grey\",\n            \"size\": 12.0,\n            \"age\": 1041300.0,\n            \"tree_id\": 1\n        },\n        {\n            \"fruit_id\": 2,\n            \"color\": \"darkgrey\",\n            \"size\": 23.0,\n            \"age\": 4233830.213,\n            \"tree_id\": 1\n        },\n        {\n            \"fruit_id\": 3,\n            \"color\": \"brown\",\n            \"size\": 2.12,\n            \"age\": 0.0,\n            \"tree_id\": 1\n        },\n        {\n            \"fruit_id\": 4,\n            \"color\": \"red\",\n            \"size\": 0.5,\n            \"age\": 2400.0,\n            \"tree_id\": 2\n        },\n        {\n            \"fruit_id\": 5,\n            \"color\": \"orangered\",\n            \"size\": 100.0,\n            \"age\": 7200.000012,\n            \"tree_id\": 2\n        }\n    ]\n}",
            "title": "Without argument"
        },
        {
            "location": "/#put",
            "text": "",
            "title": "PUT"
        },
        {
            "location": "/#with-primary-keys-arguments_1",
            "text": "$ curl -s http://localhost:5000/api/tree/1 -X PUT -H \"Content-Type: application/json\" -d '{\n  \"name\": \"cedar\"\n}'\n\n200 OK\n{\n    \"occurences\": 1,\n    \"objects\": [\n        {\n            \"id\": 1,\n            \"name\": \"cedar\"\n        }\n    ]\n}  Get it again to be sure:  $ curl -s http://localhost:5000/api/tree/1\n\n200 OK\n{\n    \"occurences\": 1,\n    \"objects\": [\n        {\n            \"id\": 1,\n            \"name\": \"cedar\"\n        }\n    ]\n}",
            "title": "With primary keys arguments"
        },
        {
            "location": "/#without-argument_1",
            "text": "$ curl -s http://localhost:5000/api/tree -X PUT -H \"Content-Type: application/json\" -d '{\n  \"objects\": [{\"id\": 2, \"name\": \"cedar\"}, {\"id\": 22, \"name\": \"mango\"}]\n}'\n\n200 OK\n{\n    \"occurences\": 2,\n    \"objects\": [\n        {\n            \"id\": 2,\n            \"name\": \"cedar\"\n        },\n        {\n            \"id\": 22,\n            \"name\": \"mango\"\n        }\n    ]\n}  Get it again to be sure:  $ curl -s http://localhost:5000/api/tree\n\n200 OK\n{\n    \"occurences\": 2,\n    \"objects\": [\n        {\n            \"id\": 2,\n            \"name\": \"cedar\"\n        },\n        {\n            \"id\": 22,\n            \"name\": \"mango\"\n        }\n    ]\n}  Check that when allow_batch is not set we can't put all:  $ curl -s http://localhost:5000/api/fruit -X PUT -H \"Content-Type: application/json\" -d '{\n  \"objects\": [\n    {\"fruit_id\": 2, \"color\": \"red\"},\n    {\"fruit_id\": 22, \"color\": \"blue\"}\n  ]\n}'\n\n406 Not Acceptable\n{\n  \"message\": \"You must set allow_batch to True if you want to use batch methods.\"\n}",
            "title": "Without argument"
        },
        {
            "location": "/#post",
            "text": "",
            "title": "POST"
        },
        {
            "location": "/#with-primary-keys-arguments_2",
            "text": "$ curl -s http://localhost:5000/api/tree/1 -X POST -H \"Content-Type: application/json\"\n\n501 Not Implemented\n{\n  \"message\": \"POST on id corresponds to collection creation. It's not implemented by default. If you want to update an item use the PUT method instead\"\n}",
            "title": "With primary keys arguments"
        },
        {
            "location": "/#without-argument_2",
            "text": "$ curl -s http://localhost:5000/api/fruit -X POST -H \"Content-Type: application/json\" -d '{\n  \"color\": \"forestgreen\", \"size\": 3.14, \"age\": 1.5926, \"tree_id\": 3\n}'\n\n200 OK\n{\n    \"occurences\": 1,\n    \"objects\": [\n        {\n            \"fruit_id\": 6,\n            \"color\": \"forestgreen\",\n            \"size\": 3.14,\n            \"age\": 1.5926,\n            \"tree_id\": 3\n        }\n    ]\n}  Now we should have a total of 6 fruits:  $ curl -s http://localhost:5000/api/fruit\n\n200 OK\n{\n    \"occurences\": 6,\n    \"objects\": [\n        {\n            \"fruit_id\": 1,\n            \"color\": \"grey\",\n            \"size\": 12.0,\n            \"age\": 1041300.0,\n            \"tree_id\": 1\n        },\n        {\n            \"fruit_id\": 2,\n            \"color\": \"darkgrey\",\n            \"size\": 23.0,\n            \"age\": 4233830.213,\n            \"tree_id\": 1\n        },\n        {\n            \"fruit_id\": 3,\n            \"color\": \"brown\",\n            \"size\": 2.12,\n            \"age\": 0.0,\n            \"tree_id\": 1\n        },\n        {\n            \"fruit_id\": 4,\n            \"color\": \"red\",\n            \"size\": 0.5,\n            \"age\": 2400.0,\n            \"tree_id\": 2\n        },\n        {\n            \"fruit_id\": 5,\n            \"color\": \"orangered\",\n            \"size\": 100.0,\n            \"age\": 7200.000012,\n            \"tree_id\": 2\n        },\n        {\n            \"fruit_id\": 6,\n            \"color\": \"forestgreen\",\n            \"size\": 3.14,\n            \"age\": 1.5926,\n            \"tree_id\": 3\n        }\n    ]\n}",
            "title": "Without argument"
        },
        {
            "location": "/#delete",
            "text": "",
            "title": "DELETE"
        },
        {
            "location": "/#with-primary-keys-arguments_3",
            "text": "$ curl -s http://localhost:5000/api/fruit/3 -X DELETE\n\n200 OK\n{\n    \"occurences\": 1,\n    \"objects\": [\n        {\n            \"fruit_id\": 3,\n            \"color\": \"brown\",\n            \"size\": 2.12,\n            \"age\": 0.0,\n            \"tree_id\": 1\n        }\n    ]\n}  Now we should have only 5 fruits remaining:  $ curl -s http://localhost:5000/api/fruit\n\n200 OK\n{\n    \"occurences\": 5,\n    \"objects\": [\n        {\n            \"fruit_id\": 1,\n            \"color\": \"grey\",\n            \"size\": 12.0,\n            \"age\": 1041300.0,\n            \"tree_id\": 1\n        },\n        {\n            \"fruit_id\": 2,\n            \"color\": \"darkgrey\",\n            \"size\": 23.0,\n            \"age\": 4233830.213,\n            \"tree_id\": 1\n        },\n        {\n            \"fruit_id\": 4,\n            \"color\": \"red\",\n            \"size\": 0.5,\n            \"age\": 2400.0,\n            \"tree_id\": 2\n        },\n        {\n            \"fruit_id\": 5,\n            \"color\": \"orangered\",\n            \"size\": 100.0,\n            \"age\": 7200.000012,\n            \"tree_id\": 2\n        },\n        {\n            \"fruit_id\": 6,\n            \"color\": \"forestgreen\",\n            \"size\": 3.14,\n            \"age\": 1.5926,\n            \"tree_id\": 3\n        }\n    ]\n}",
            "title": "With primary keys arguments"
        },
        {
            "location": "/#without-argument_3",
            "text": "Batch delete is not allowed on fruit:  $ curl -s http://localhost:5000/api/fruit -X DELETE\n\n501 Not Implemented\n{\n  \"message\": \"You must set allow_batch to True if you want to use batch methods.\"\n}  But is on tree:  $ curl -s http://localhost:5000/api/tree -X DELETE\n\n200 OK\n{\n    \"occurences\": 3,\n    \"objects\": [\n        {\n            \"id\": 1,\n            \"name\": \"pine\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"maple\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"oak\"\n        }\n    ]\n}  $ curl -s http://localhost:5000/api/tree\n\n200 OK\n{\n    \"occurences\": 0,\n    \"objects\": []\n}",
            "title": "Without argument"
        },
        {
            "location": "/#patch",
            "text": "",
            "title": "PATCH"
        },
        {
            "location": "/#with-primary-keys-arguments_4",
            "text": "$ curl -s http://localhost:5000/api/fruit/1 -X PATCH -H \"Content-Type: application/json\" -d '{\n  \"color\": \"blue\"\n}'\n\n200 OK\n{\n    \"occurences\": 1,\n    \"objects\": [\n        {\n          \"fruit_id\": 1,\n          \"color\": \"blue\",\n          \"size\": 12.0,\n          \"age\": 1041300.0,\n          \"tree_id\": 1\n        }\n    ]\n}",
            "title": "With primary keys arguments"
        },
        {
            "location": "/#without-argument_4",
            "text": "$ curl -s http://localhost:5000/api/tree -X PATCH -H \"Content-Type: application/json\" -d '{\n  \"objects\": [{\"id\": 2, \"name\": \"cedar\"}, {\"id\": 3, \"name\": \"mango\"}]\n}'\n\n200 OK\n{\n    \"occurences\": 2,\n    \"objects\": [\n        {\n            \"id\": 2,\n            \"name\": \"cedar\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"mango\"\n        }\n    ]\n}  Check that when allow_batch is not set we can't put all:  $ curl -s http://localhost:5000/api/fruit -X PATCH -H \"Content-Type: application/json\" -d '{\n  \"objects\": [\n    {\"fruit_id\": 1, \"color\": \"blue\"},\n    {\"fruit_id\": 3, \"age\": 1038540.0},\n    {\"fruit_id\": 4, \"color\": \"rainbow\", \"size\": 8},\n    {\"fruit_id\": 5, \"size\": 10, \"tree_id\": 1}\n  ]\n}'\n\n406 Not Acceptable\n{\n  \"message\": \"You must set allow_batch to True if you want to use batch methods.\"\n}  otherwise all the specified attributes would have been patched.",
            "title": "Without argument"
        },
        {
            "location": "/unrest/",
            "text": "unrest\n\n\n\nUnRest\n\n\n\nUnRest(self, app=None, session=None, path='/api', version='', framework=None, SerializeClass=None, DeserializeClass=None, allow_options=True, serve_openapi_file=True, openapi_class=<class 'unrest.generators.openapi.OpenApi'>, options_class=<class 'unrest.generators.options.Options'>, info={})\n\n\n\n\nA troubling rest api library for sqlalchemy models.\nThis is the main entry point of unrest.\n\n\nCommon usage is as following:\n\n\nrest = UnRest(app, session)  # app is your application\n# When called, it instanciate a `Rest` object that will register the\n# REST endpoints. See the `Rest` class.\nrest(Model1)\nrest(Model2)\n\n\n\n\nArguments\n\n\n\n\napp\n: Your web application,\n        can be set afterwards using \nUnRest.init_app\n\n\nsession\n: Your sqlalchemy session,\n        can be set afterwards using \nUnRest.init_session\n\n        and \ninit_session\n method.\n\n\npath\n: Default '/api', sets the root url path for your endpoints\n\n\nversion\n: Adds a version to the root url path if specified\n        (i.e. /api/v2)\n\n\nframework\n: Your specific framework class, defaults to auto detect.\n\n\nSerializeClass\n: A global alternative for \nSerialize\n class.\n\n\nDeserializeClass\n: A global alternative for \nDeserialize\n class.\n\n\nallow_options\n: Set it to False to disable OPTIONS requests.\n\n\nserve_openapi_file\n: Set it to False to disable openapi file generation.\n\n\ninfo\n: Additional info for the openapi metadata.\nUnrest aims to be framework agnostic.\nIt currently works with Flask out of the box, for another web framework\nyou will have to implement your own Framework class.\nSee \nFlaskUnRest\n in \nflask_framework.py\n\n\n\n\nRestError\n\n\n\nUnRest.RestError(self, status, message, extra=None)\n\n\n\n\nException raised by rest methods. It's catched by the REST method\nwrapper and will return a \nstatus\n http error with the specified\n\nmessage\n.\n\n\nValidationError\n\n\n\nUnRest.ValidationError(self, message)\n\n\n\n\nException raised by rest validation methods.\n\n\ninit_app\n\n\n\nUnRest.init_app(self, app)\n\n\n\n\nSets the app on UnRest if it was missing during instantiation.\n\ninit_session\n\n\nUnRest.init_session(self, session)\n\n\n\n\nSets the sqlalchemy session on UnRest\nif it was missing during instantiation.\n\n\nall\n\n\n\nReturn all supported methods. Useful for the rest\n\nmethod\n keyword argument.\n\n\nraise_error\n\n\n\nUnRest.raise_error(self, status, message, extra=None)\n\n\n\n\nRaise an error that will be handled by the rest wrapper, which\nwill return a json response with status as HTTP status code\nand message as content.\n\n\nArguments\n\n\n\n\nstatus\n: The http status code corresponding to the error\n        (404 for instance)\n\n\nmessage\n: The message that will be returned in the json response\n\n\nextra\n: Mapping of extra fields to return in json response\n\n\n\n\n__call__\n\n\n\nUnRest.__call__(self, *args, **kwargs)\n\n\n\n\nReturns a \nunrest.Rest\n instance. See rest entry points.",
            "title": "UnRest"
        },
        {
            "location": "/rest/",
            "text": "unrest.rest\n\n\n\nRest\n\n\n\nRest(self, unrest, Model, methods=['GET'], name=None, only=None, exclude=None, query=None, properties=None, relationships=None, allow_batch=False, auth=None, read_auth=None, write_auth=None, validators=None, primary_keys=None, SerializeClass=<class 'unrest.coercers.Serialize'>, DeserializeClass=<class 'unrest.coercers.Deserialize'>)\n\n\n\n\nThis is the entry point for generating a REST endpoint for a specific model\nThe final uri if the path is '/api' and version 'v2' would be:\n\n/api/v2/model\n and \n/api/v2/model/pk1/pk2\n and if model is not in the\npublic schema \n/api/v2/schema/model\n and \n/api/v2/schema/model/pk1/pk2\n.\n\n\nUsage:\n\n\n    rest = UnRest(app)\n\n    def name_validator(field):\n        if len(field.value) > 12:\n            raise field.ValidationError(\n                'Name is too long (max 12 characters).')\n        return field.value\n\n    rest(Person, only=['name', 'sex', 'age'], methods=rest.all,\n         query=lambda q: q.filter(Person.age > 16),\n         validators={'name': name_validator})\n\n\n\n\nArguments\n\n\n\n\nunrest\n: The unrest instance given automatically on UnRest call.\n\n\nModel\n: The sqlalchemy orm model class.\n\n\nmethods\n: The allowed method list on this endpoint. Possible values are\n        GET, PUT, POST, DELETE, PATCH and rest.all\n\n\nname\n: If specified replaces the model name in url.\n\n\nonly\n: If specified restricts the json fields to this list.\n\n\nexclude\n: If specified removes the json fields in this list.\n\n\nquery\n: A function that takes the Model query and returns your specific\n        query. Can be useful to filter data for all the methods.\n\n\nproperties\n: A list of additional properties to retrieve on the model.\n\n\nrelationships\n: A mapping of relationships and rest endpoints to fetch\n        with the model.\n\n\nallow_batch\n: Allow batch operations (PUT, DELETE and PATCH)\n        without primary key.\n\n\nauth\n: A decorator that will always be called.\n\n\nread_auth\n: A decorator that will be called on GET.\n\n\nwrite_auth\n: A decorator that will be called on PUT, POST, DELETE\n        and PATCH.\n\n\nvalidators\n: A mapping of field names and validation functions.\n        A validator function takes a \nRest.Validatable\n object as parameter\n        and must return the final value for the field or raise a\n        \nrest.ValidationError(reason)\n (where \nrest = Unrest()\n)\n\n\nprimary_keys\n: A list of column names to use as primary_keys\n        (use real db primary keys by default)\n\n\nSerializeClass\n: An alternative \nSerialize\n class.\n\n\nDeserializeClass\n: An alternative \nDeserialize\n class.\n\n\n\n\nget\n\n\n\nRest.get(self, payload, **pks)\n\n\n\n\nThe GET method\n\n\nNo arguments: Returns all query elements. (/api/model/)\nPrimary keys: Returns the element in query with the primary keys or\n    404. (/api/model/pk)\n\n\nArguments\n\n\n\n\npayload\n: The json request content ignored for GET.\n\n\npks\n: The primary keys in url if any.\n\n\n\n\nput\n\n\n\nRest.put(self, payload, **pks)\n\n\n\n\nThe PUT method\n\n\nNo arguments: If allow_batch set to true replace all the query elements\n    with the ones in the request payload.\nPrimary keys: Create or replace the element associated\n    with the primary keys from the one in the request payload.\n\n\nArguments\n\n\n\n\npayload\n: The json request content containing new elements.\n\n\npks\n: The primary keys in url if any.\n\n\n\n\npost\n\n\n\nRest.post(self, payload, **pks)\n\n\n\n\nThe POST method\n\n\nNo arguments: Add element from request payload.\nPrimary keys: Correspond to new collection creation. Unused.\n\n\nArguments\n\n\n\n\npayload\n: The json request content containing the new element.\n\n\npks\n: The primary keys in url if any.\n\n\n\n\ndelete\n\n\n\nRest.delete(self, payload, **pks)\n\n\n\n\nThe DELETE method\n\n\nNo arguments: If allow_batch set to true delete all query elements.\nPrimary keys: Delete the element associated with the primary keys.\n\n\nArguments\n\n\n\n\npayload\n: The json request content ignored in DELETE.\n\n\npks\n: The primary keys of the element to delete.\n\n\n\n\npatch\n\n\n\nRest.patch(self, payload, **pks)\n\n\n\n\nThe PATCH method\n\n\nNo arguments: If allow_batch set to true patch existing elements\n    with element attributes specified in the request payload.\nPrimary keys: Patch only one\n\n\nArguments\n\n\n\n\npayload\n: The json request content containing\n        a list of attributes to be patched.\n\n\npks\n: The primary keys of the element to patch.\n\n\n\n\noptions\n\n\n\nRest.options(self, payload, **pks)\n\n\n\n\nThe OPTIONS method\n\n\nReturns a description of this rest endpoint.\n\n\ndeclare\n\n\n\nRest.declare(self, method, manual_commit=False)\n\n\n\n\nA decorator to register an alternative method.\nThe original is still callable with rest.{method}\n\n\nfruit = rest(Fruit)\n\n@fruit.declare('GET')\ndef get(payload, fruit_id=None):\n    rv = fruit.get(payload, fruit_id=fruit_id)\n    return {\n        'occurences': rv['occurences'],\n        'objects': [\n            {'id': obj['fruit_id']} for obj in rv['objects']\n        ]\n    }\n\n\n\n\nArguments\n\n\n\n\nmethod\n: The method to override ('GET' for exemple)\n\n\nmanual_commit\n: Don't auto commit after the method.\n\n\n\n\nsub\n\n\n\nRest.sub(self, query_factory, **kwargs)\n\n\n\n\nThis methods return a copy of the current rest endpoint and takes a\n        {query_factory} argument to alter the current query.\n\n\nArguments\n\n\n\n\nquery_factory\n: A function that takes the original query\n                in parameter and returns a new query.\n\n\n**kwargs\n: Can be used to override Rest constructor arguments\n                (query is not supported)\n\n\n\n\nvalidate\n\n\n\nRest.validate(self, item, existing=None, errors=None)\n\n\n\n\nValidates all validators colums against validators.\nRaise RestError if validation errors.",
            "title": "Rest entry points"
        },
        {
            "location": "/coercers/",
            "text": "unrest.coercers\n\n\n\nSerialize\n\n\n\nSerialize(self, model, columns, properties, relationships)\n\n\n\n\nBase serializer class\n\n\nCasts python sqlalchemy data into a JSON compliant type according to\nthe sqlalchemy column type.\n\n\nNot all types are implemented as of now and it's fairly easy to add:\nJust add a \nserialize_type\n method for \ntype\n and it shall work.\n\n\nThe serialize class can be configured with the rest function and\non the UnRest declaration.\n\n\nFor example:\n\n\nfrom unrest.coercers import Serialize\n\nclass BetterSerialize(Serialize):\n    def serialize_matrix(self, type, data):\n        return data.matrix_to_string()\n\nrest = UnRest(app, session, SerializeClass=BetterSerialize)\n...\n\n\n\n\nArguments\n\n\n\n\nmodel\n: The sqlachemy item to serialize.\n\n\ncolumns\n: The list of columns to serialize.\n\n\nproperties\n: The list of properties to serialize.\n\n\nrelationships\n: The list of relationships to serialize.\n\n\n\n\ndict\n\n\n\nSerialize.dict(self)\n\n\n\n\nSerialize the given model to a JSON compatible dict\n\nDeserialize\n\n\nDeserialize(self, payload, columns)\n\n\n\n\nBase deserializer class\n\n\nCasts JSON data back to compatible python sqlalchemy type.\n\n\nNot all types are implemented as of now and it's fairly easy to add:\nJust add a \ndeserialize_type\n method for \ntype\n and it shall work.\n\n\nThe deserialize class can be configured with the rest function and\non the UnRest declaration.\n\n\nFor example:\n\n\nfrom unrest.coercers import Deserialize\n\nclass BetterDeserialize(Deserialize):\n    def deserialize_matrix(self, type, data):\n        return Matrix.from_string(data)\n\nrest = UnRest(app, session, DeserializeClass=BetterDeserialize)\n...\n\n\n\n\nArguments\n\n\n\n\npayload\n: The JSON payload to deserialize\n\n\ncolumns\n: The list of columns to deserialize\n\n\n\n\nmerge\n\n\n\nDeserialize.merge(self, item, payload=None)\n\n\n\n\nDeserialize the given payload into the existing sqlachemy \nitem\n\n\ncreate\n\n\nDeserialize.create(self, factory)\n\n\n\n\nDeserialize objects in the given payload into a list of new items\ncreated with the \nfactory\n function.",
            "title": "Serialization/Deserialization"
        },
        {
            "location": "/flask_framework/",
            "text": "unrest.flask_framework\n\n\n\nFlaskUnRest\n\n\n\nFlaskUnRest(self, app, prefix)\n\n\n\n\nUnrest flask framework implementation.\nThis is the framework abstraction you can implement for your own framework\n\n\nregister_route\n\n\n\nFlaskUnRest.register_route(self, path, method, parameters, fun)\n\n\n\n\nRegister the given function for \npath\n and \nmethod\n with and without\n\nparameters\n.\n\n\nArguments\n\n\n\n\npath\n: The url of the endoint without arguments. ('/api/person')\n\n\nmethod\n: The HTTP method to register the route on.\n\n\nparameters\n: The primary keys of the model that can be given\n        after the path. \nPrimaryKey('id'), PrimaryKey('type')) -> '/api/person/<id>/<type>'\n\n\nfun\n: The route function\n\n\n\n\nrequest_json\n\n\n\nFlaskUnRest.request_json(self)\n\n\n\n\nMust return the string of the current JSON request content or None\n\n\nsend_json\n\n\n\nFlaskUnRest.send_json(self, json, status_code=200)\n\n\n\n\nSend a \nstatus_code\n JSON response with \njson\n as content\n\n\nArguments\n\n\n\n\njson\n: The JSON string to send.\n\n\nstatus_code: The response status code. (Default\n: 200)\n\n\n\n\nsend_error\n\n\n\nFlaskUnRest.send_error(self, message, status_code)\n\n\n\n\nSend an error as a JSON response with the given status code.\n\n\nArguments\n\n\n\n\nmessage\n: The JSON string containing the error message.\n\n\nstatus_code\n: The HTTP status code (i.e. 402)\n\n\n\n\nurl\n\n\n\nReturn the api url root",
            "title": "Flask"
        }
    ]
}